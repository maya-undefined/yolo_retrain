from __future__ import annotations
"""
Train a single HBB detector on mixed ground+aerial data using balanced lists and
random multi-scale. Use with lists/train.txt and lists/val.txt generated by domain_lists.py
"""
import json
import random
from ultralytics import YOLO
import yaml
import typer

app = typer.Typer(add_completion=False)

@app.command()
def main(
    data: str = typer.Option('milveh.yaml'),
    model: str = typer.Option('yolov8m.pt'),
    img_min: int = typer.Option(640),
    img_max: int = typer.Option(768), # on my machine 768 doesn't cause my machine to run out of mem
    epochs: int = typer.Option(120),
    batch: int = typer.Option(32),
    cfg: str | None = typer.Option(None),
    project: str = typer.Option('runs/detect'),
    name: str = typer.Option('train_dual'),
):
    overrides = {
        'data': data,
        'epochs': epochs,
        'batch': batch,
        'project': project,
        'name': name,
        'cos_lr': True,
        'patience': 80,
        'close_mosaic': 1,
        # Random multi-scale in Ultralytics is handled via imgsz with fraction changes per batch.
        'imgsz': img_max,
    }

    if cfg:
        with open(cfg, "r") as f:
            overrides.update(yaml.safe_load(f))

    model_obj = YOLO(model)
    print('Training overrides:' + json.dumps(overrides, indent=2))
    # Ultralytics does per-batch random scale around imgsz; we emulate wider range by epoch jitter
    for epoch_group in range(0, epochs, 10):
        overrides['epochs'] = min(epochs - epoch_group, 10)
        overrides['imgsz'] = random.randint(img_min // 32, img_max // 32) * 32
        print(f"Epochs {epoch_group}.. imgsz={overrides['imgsz']}")
        model_obj.train(**overrides)

if __name__ == '__main__':
    app()